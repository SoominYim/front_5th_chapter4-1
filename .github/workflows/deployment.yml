name: Deploy Next.js, Invalidate CloudFront, and Update README with Lighthouse Report

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build static site
        run: yarn build

      - name: Check if out/ exists
        run: |
          if [ ! -d "out" ]; then
            echo "❌ out/ 폴더가 없습니다! next.config.js에 output: 'export' 추가 여부를 확인하세요."
            exit 1
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to S3
        run: aws s3 sync out/ s3://${{ secrets.S3_BUCKET_NAME }} --delete

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

  lighthouse:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq bc

      - name: Run Lighthouse on S3
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://soominss-buket.s3-website.ap-northeast-2.amazonaws.com/
          uploadArtifacts: false

      - name: Run Lighthouse on CloudFront
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://d3jxcj7xvwc1i5.cloudfront.net/
          uploadArtifacts: false

      - name: List Lighthouse result files
        run: |
          echo "==== .lighthouseci/*.report.json ===="
          ls -l .lighthouseci/*.report.json || echo "No report files found"

      - name: Generate summary table
        id: make_table
        run: |
          # 한국 시간으로 현재 날짜 (KST)
          DATE=$(TZ=Asia/Seoul date '+%Y-%m-%d %H:%M %Z')
          echo "DATE=$DATE" >> $GITHUB_ENV

          function emoji_score() {
            SCORE=$1
            if [[ $SCORE == "N/A" ]]; then
              echo "⬜"
            elif (( $(echo "$SCORE >= 90" | bc -l) )); then
              echo "🟩"
            elif (( $(echo "$SCORE >= 50" | bc -l) )); then
              echo "🟨"
            else
              echo "🟥"
            fi
          }

          # 최신 S3/CloudFront 리포트 추출
          S3_FILE=$(ls -t .lighthouseci/*.report.json | grep 'soominss-buket' | head -1)
          CF_FILE=$(ls -t .lighthouseci/*.report.json | grep -v 'soominss-buket' | head -1)

          # jq 파싱 함수
          function parse_lh() {
            local file=$1
            local key=$2
            jq -r "$key" "$file" 2>/dev/null || echo "N/A"
          }

          # S3 값 추출
          S3_PERF=$(parse_lh "$S3_FILE" '.categories.performance.score * 100')
          S3_ACC=$(parse_lh "$S3_FILE" '.categories.accessibility.score * 100')
          S3_BP=$(parse_lh "$S3_FILE" '.categories."best-practices".score * 100')
          S3_SEO=$(parse_lh "$S3_FILE" '.categories.seo.score * 100')
          S3_PWA=$(parse_lh "$S3_FILE" '.categories.pwa.score * 100')

          S3_FCP=$(parse_lh "$S3_FILE" '.audits."first-contentful-paint".numericValue')
          S3_LCP=$(parse_lh "$S3_FILE" '.audits."largest-contentful-paint".numericValue')
          S3_SI=$(parse_lh "$S3_FILE" '.audits."speed-index".numericValue')
          S3_TTI=$(parse_lh "$S3_FILE" '.audits."interactive".numericValue')
          S3_TBT=$(parse_lh "$S3_FILE" '.audits."total-blocking-time".numericValue')
          S3_CLS=$(parse_lh "$S3_FILE" '.audits."cumulative-layout-shift".numericValue')
          S3_TTFB=$(parse_lh "$S3_FILE" '.audits."server-response-time".numericValue')
          S3_REQ=$(parse_lh "$S3_FILE" '.audits."resource-summary".details.items[] | select(.resourceType=="total").requestCount')
          S3_SIZE=$(parse_lh "$S3_FILE" '.audits."resource-summary".details.items[] | select(.resourceType=="total").transferSize')

          # CloudFront 값 추출
          CF_PERF=$(parse_lh "$CF_FILE" '.categories.performance.score * 100')
          CF_ACC=$(parse_lh "$CF_FILE" '.categories.accessibility.score * 100')
          CF_BP=$(parse_lh "$CF_FILE" '.categories."best-practices".score * 100')
          CF_SEO=$(parse_lh "$CF_FILE" '.categories.seo.score * 100')
          CF_PWA=$(parse_lh "$CF_FILE" '.categories.pwa.score * 100')

          CF_FCP=$(parse_lh "$CF_FILE" '.audits."first-contentful-paint".numericValue')
          CF_LCP=$(parse_lh "$CF_FILE" '.audits."largest-contentful-paint".numericValue')
          CF_SI=$(parse_lh "$CF_FILE" '.audits."speed-index".numericValue')
          CF_TTI=$(parse_lh "$CF_FILE" '.audits."interactive".numericValue')
          CF_TBT=$(parse_lh "$CF_FILE" '.audits."total-blocking-time".numericValue')
          CF_CLS=$(parse_lh "$CF_FILE" '.audits."cumulative-layout-shift".numericValue')
          CF_TTFB=$(parse_lh "$CF_FILE" '.audits."server-response-time".numericValue')
          CF_REQ=$(parse_lh "$CF_FILE" '.audits."resource-summary".details.items[] | select(.resourceType=="total").requestCount')
          CF_SIZE=$(parse_lh "$CF_FILE" '.audits."resource-summary".details.items[] | select(.resourceType=="total").transferSize')

          # ms→s 변환 함수
          function ms_to_s() {
            awk "BEGIN {printf \"%.1f\", $1/1000}"
          }
          function b_to_mb() {
            awk "BEGIN {printf \"%.2f\", $1/1024/1024}"
          }

          {
            echo '## 📊 S3 vs CloudFront Lighthouse 비교'
            echo "> 아래 표는 **최신 배포 시마다 자동으로 업데이트**됩니다."
            echo "> (업데이트: $DATE)"
            echo ""
            echo "| 항목 | S3 | CloudFront |"
            echo "|------|------------------|--------------------|"
            echo "| Performance | $(emoji_score $S3_PERF) $S3_PERF | $(emoji_score $CF_PERF) $CF_PERF |"
            echo "| Accessibility | $(emoji_score $S3_ACC) $S3_ACC | $(emoji_score $CF_ACC) $CF_ACC |"
            echo "| Best Practices | $(emoji_score $S3_BP) $S3_BP | $(emoji_score $CF_BP) $CF_BP |"
            echo "| SEO | $(emoji_score $S3_SEO) $S3_SEO | $(emoji_score $CF_SEO) $CF_SEO |"
            echo "| PWA | $(emoji_score $S3_PWA) $S3_PWA | $(emoji_score $CF_PWA) $CF_PWA |"
            echo "| FCP | $S3_FCP ms ($(ms_to_s $S3_FCP)s) | $CF_FCP ms ($(ms_to_s $CF_FCP)s) |"
            echo "| LCP | $S3_LCP ms ($(ms_to_s $S3_LCP)s) | $CF_LCP ms ($(ms_to_s $CF_LCP)s) |"
            echo "| Speed Index | $S3_SI ms ($(ms_to_s $S3_SI)s) | $CF_SI ms ($(ms_to_s $CF_SI)s) |"
            echo "| TTI | $S3_TTI ms ($(ms_to_s $S3_TTI)s) | $CF_TTI ms ($(ms_to_s $CF_TTI)s) |"
            echo "| TBT | $S3_TBT ms ($(ms_to_s $S3_TBT)s) | $CF_TBT ms ($(ms_to_s $CF_TBT)s) |"
            echo "| CLS | $S3_CLS | $CF_CLS |"
            echo "| TTFB | $S3_TTFB ms ($(ms_to_s $S3_TTFB)s) | $CF_TTFB ms ($(ms_to_s $CF_TTFB)s) |"
            echo "| Total Requests | $S3_REQ | $CF_REQ |"
            echo "| Total Transfer Size | $S3_SIZE bytes ($(b_to_mb $S3_SIZE)MB) | $CF_SIZE bytes ($(b_to_mb $CF_SIZE)MB) |"
          } > summary.md

      - name: Update README.md with summary table
        run: |
          awk '
          BEGIN {inblock=0}
          /<!-- 측정표 -->/ {print; while ((getline line < "summary.md") > 0) print line; inblock=1; next}
          /<!-- end -->/ && inblock {print; inblock=0; next}
          !inblock {print}
          ' README.md > README.tmp && mv README.tmp README.md

      - name: Commit & push if README.md changed
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "docs: update Lighthouse 성능 리포트 (README 자동 갱신)"
          branch: main
