name: Deploy Next.js, Invalidate CloudFront, and Update README with Lighthouse Report

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Build static site
        run: yarn build

      - name: Check if out/ exists
        run: |
          if [ ! -d "out" ]; then
            echo "❌ out/ 폴더가 없습니다! next.config.js에 output: 'export' 추가 여부를 확인하세요."
            exit 1
          fi

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy to S3
        run: aws s3 sync out/ s3://${{ secrets.S3_BUCKET_NAME }} --delete

      - name: Invalidate CloudFront cache
        run: |
          aws cloudfront create-invalidation \
            --distribution-id ${{ secrets.CLOUDFRONT_DISTRIBUTION_ID }} \
            --paths "/*"

  lighthouse:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq bc

      - name: Run Lighthouse on S3
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            http://soominss-buket.s3-website.ap-northeast-2.amazonaws.com/
          uploadArtifacts: false

      - name: Run Lighthouse on CloudFront
        uses: treosh/lighthouse-ci-action@v10
        with:
          urls: |
            https://d3jxcj7xvwc1i5.cloudfront.net/
          uploadArtifacts: false

      - name: Generate summary table
        id: make_table
        run: |
          # 한국 시간으로 현재 날짜 (KST)
          DATE=$(TZ=Asia/Seoul date '+%Y-%m-%d %H:%M %Z')
          echo "DATE=$DATE" >> $GITHUB_ENV

          function emoji_score() {
            SCORE=$1
            if (( $(echo "$SCORE >= 90" | bc -l) )); then
              echo "🟩"
            elif (( $(echo "$SCORE >= 50" | bc -l) )); then
              echo "🟨"
            else
              echo "🟥"
            fi
          }

          echo '## 📊 S3 & CloudFront Lighthouse 리포트' > summary.md
          echo '> 아래 표는 **최신 배포 시마다 자동으로 업데이트**됩니다.' >> summary.md
          echo "> (업데이트: $DATE)" >> summary.md

          for f in .lighthouseci/*.report.json; do
            NAME=$(grep -q 'soominss-buket' $f && echo "S3" || echo "CloudFront")

            # 카테고리별 점수
            PERF=$(jq '.categories.performance.score * 100' $f)
            ACC=$(jq '.categories.accessibility.score * 100' $f)
            BP=$(jq '.categories."best-practices".score * 100' $f)
            SEO=$(jq '.categories.seo.score * 100' $f)
            PWA=$(jq '.categories.pwa.score * 100' $f 2>/dev/null || echo "N/A")

            # 주요 성능 지표
            FCP=$(jq '.audits."first-contentful-paint".numericValue' $f)
            LCP=$(jq '.audits."largest-contentful-paint".numericValue' $f)
            SI=$(jq '.audits."speed-index".numericValue' $f)
            TTI=$(jq '.audits."interactive".numericValue' $f)
            TBT=$(jq '.audits."total-blocking-time".numericValue' $f)
            CLS=$(jq '.audits."cumulative-layout-shift".numericValue' $f)

            # 초 단위 (소수점 첫째)
            FCPS=$(awk "BEGIN {printf \"%.1f\", $FCP/1000}")
            LCPS=$(awk "BEGIN {printf \"%.1f\", $LCP/1000}")
            SIS=$(awk "BEGIN {printf \"%.1f\", $SI/1000}")
            TTIS=$(awk "BEGIN {printf \"%.1f\", $TTI/1000}")
            TBTS=$(awk "BEGIN {printf \"%.1f\", $TBT/1000}")

            # 추가 세부 측정값
            TTFB=$(jq '.audits."server-response-time".numericValue' $f 2>/dev/null || echo "N/A")
            REQCOUNT=$(jq '.audits."resource-summary".details.items[] | select(.resourceType=="total").requestCount' $f 2>/dev/null || echo "N/A")
            SIZE=$(jq '.audits."resource-summary".details.items[] | select(.resourceType=="total").transferSize' $f 2>/dev/null || echo "N/A")
            SIZEMB=$(awk "BEGIN {printf \"%.2f\", $SIZE/1024/1024}")

            echo "" >> summary.md
            echo "### ⚡️ Lighthouse report: $NAME" >> summary.md
            echo "" >> summary.md
            echo "| Category | Score |" >> summary.md
            echo "| --- | --- |" >> summary.md
            echo "| $(emoji_score $PERF) Performance | $PERF |" >> summary.md
            echo "| $(emoji_score $ACC) Accessibility | $ACC |" >> summary.md
            echo "| $(emoji_score $BP) Best Practices | $BP |" >> summary.md
            echo "| $(emoji_score $SEO) SEO | $SEO |" >> summary.md
            echo "| $(emoji_score $PWA) PWA | $PWA |" >> summary.md

            echo "" >> summary.md
            echo "| Metric | Value (ms) | Value (s) |" >> summary.md
            echo "| --- | --- | --- |" >> summary.md
            echo "| First Contentful Paint (FCP) | $FCP | $FCPS |" >> summary.md
            echo "| Largest Contentful Paint (LCP) | $LCP | $LCPS |" >> summary.md
            echo "| Speed Index | $SI | $SIS |" >> summary.md
            echo "| Time to Interactive (TTI) | $TTI | $TTIS |" >> summary.md
            echo "| Total Blocking Time (TBT) | $TBT | $TBTS |" >> summary.md
            echo "| Cumulative Layout Shift (CLS) | $CLS | - |" >> summary.md
            echo "| Time to First Byte (TTFB) | $TTFB | $(awk "BEGIN {printf \"%.1f\", $TTFB/1000}") |" >> summary.md
            echo "| Total Requests | $REQCOUNT | - |" >> summary.md
            echo "| Total Transfer Size (bytes) | $SIZE | $SIZEMB MB |" >> summary.md

          done

      - name: Update README.md with summary table
        run: |
          awk '
          BEGIN {inblock=0}
          /<!-- 측정표 -->/ {print; while ((getline line < "summary.md") > 0) print line; inblock=1; next}
          /<!-- end -->/ && inblock {print; inblock=0; next}
          !inblock {print}
          ' README.md > README.tmp && mv README.tmp README.md

      - name: Commit & push if README.md changed
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "docs: update Lighthouse 성능 리포트 (README 자동 갱신)"
          branch: main
